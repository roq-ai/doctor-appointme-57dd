generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id                               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date_time                        DateTime @db.Timestamp(6)
  duration                         Int
  status                           String   @db.VarChar(255)
  guest_id                         String   @db.Uuid
  doctor_id                        String   @db.Uuid
  created_at                       DateTime @default(now()) @db.Timestamp(6)
  updated_at                       DateTime @default(now()) @db.Timestamp(6)
  user_appointment_doctor_idTouser user     @relation("appointment_doctor_idTouser", fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_appointment_guest_idTouser  user     @relation("appointment_guest_idTouser", fields: [guest_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model patient_record {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patient_name       String   @db.VarChar(255)
  patient_age        Int
  patient_gender     String   @db.VarChar(255)
  medical_history    String?  @db.VarChar(255)
  current_medication String?  @db.VarChar(255)
  nurse_id           String   @db.Uuid
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @default(now()) @db.Timestamp(6)
  user               user     @relation(fields: [nurse_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model schedule {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_time  DateTime @db.Timestamp(6)
  end_time    DateTime @db.Timestamp(6)
  day_of_week Int
  doctor_id   String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                                      String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                   String           @unique @db.VarChar(255)
  firstName                               String?          @db.VarChar(255)
  lastName                                String?          @db.VarChar(255)
  roq_user_id                             String           @db.VarChar(255)
  tenant_id                               String           @db.VarChar(255)
  created_at                              DateTime         @default(now()) @db.Timestamp(6)
  updated_at                              DateTime         @default(now()) @db.Timestamp(6)
  appointment_appointment_doctor_idTouser appointment[]    @relation("appointment_doctor_idTouser")
  appointment_appointment_guest_idTouser  appointment[]    @relation("appointment_guest_idTouser")
  organization                            organization[]
  patient_record                          patient_record[]
  schedule                                schedule[]
}
